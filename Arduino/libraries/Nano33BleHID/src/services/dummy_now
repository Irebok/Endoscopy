// #include <mbed.h>
// #include "services/HIDEndoscopyService.h"

// namespace {

// // Report Reference
// static report_reference_t input_report_ref = { 0, INPUT_REPORT };

// static GattAttribute input_report_ref_desc(
//   ATT_UUID_HID_REPORT_ID_MAPPING,
//   (uint8_t*)&input_report_ref,
//   sizeof(input_report_ref),
//   sizeof(input_report_ref)
// );

// static GattAttribute *input_report_ref_descs[] = {
//   &input_report_ref_desc,
// };

// // Input Report
// #pragma pack(push, 1)
// struct {
//   float axisX;
//   float axisY;
//   float axisZ;
//   uint32_t dt;
//   uint8_t id;
//   uint8_t enable;  
//   uint8_t timestamp;  
//   uint8_t buttons;
// } hid_input_report;
// #pragma pack(pop)

// // Report Map
// static uint8_t hid_report_map[] =
// {
//   USAGE_PAGE(1),      0x01,       // Usage Page (Generic Desktop)
//   USAGE(1),           0x05,       // Usage (Game Pad)
//   COLLECTION(1),      0x01,       // Collection (Application)
//     USAGE(1),           0x01,       // Usage (Pointer)
//     COLLECTION(1),      0x00,       // Collection (Physical)

//     // Array 1
//       USAGE_PAGE(1),      0x01,       // Usage Page (Generic Desktop)
//       USAGE(1),           0x30,       // Usage (acelX)
//       USAGE(1),           0x31,       // Usage (acelY)
//       USAGE(1),           0x32,       // Usage (acelZ)
//       REPORT_SIZE(1),     0x20,       // Report Size (32)
//       REPORT_COUNT(1),    0x03,       // Report Count (3)
//       INPUT(1),           0x02,       // Input (Data, Variable, Absolute)

//       USAGE_PAGE(1),      0x01,       // Usage Page (Generic Desktop)
//       USAGE(1),           0x33,       // Usage (dt)
//       REPORT_SIZE(1),     0x20,       // Report Size (32)
//       REPORT_COUNT(1),    0x01,       // Report Count (1)
//       INPUT(1),           0x02,       // Input (Data, Variable, Absolute)

//       USAGE_PAGE(1),      0x01,       // Usage Page (Generic Desktop)
//       USAGE(1),           0x34,       // Usage (id)
//       REPORT_SIZE(1),     0x08,       // Report Size (8)
//       REPORT_COUNT(1),    0x01,       // Report Count (1)
//       INPUT(1),           0x02,       // Input (Data, Variable, Absolute)

//       USAGE_PAGE(1),      0x01,       // Usage Page (Generic Desktop)
//       USAGE(1),           0x35,       // Usage (enable)
//       REPORT_SIZE(1),     0x08,       // Report Size (8)
//       REPORT_COUNT(1),    0x01,       // Report Count (1)
//       INPUT(1),           0x02,       // Input (Data, Variable, Absolute)

//       USAGE_PAGE(1),      0x01,       // Usage Page (Generic Desktop)
//       USAGE(1),           0x35,       // Usage (timestamp)
//       REPORT_SIZE(1),     0x08,       // Report Size (8)
//       REPORT_COUNT(1),    0x01,       // Report Count (1)
//       INPUT(1),           0x02,       // Input (Data, Variable, Absolute)

//       // Buttons
//       USAGE_PAGE(1),      0x09,       // Usage Page (Buttons)
//       USAGE_MINIMUM(1),   0x01,       // Usage Minimum (1)
//       USAGE_MAXIMUM(1),   0x04,       // Usage Maximum (4)
//       LOGICAL_MINIMUM(1), 0x00,       // Logical Minimum (0)
//       LOGICAL_MAXIMUM(1), 0x01,       // Logical Maximum (1)
//       REPORT_COUNT(1),    0x04,       // Report Count (4)
//       REPORT_SIZE(1),     0x01,       // Report Size (1)
//       INPUT(1),           0x02,       // Input (Data, Variable, Absolute)
//       // (padding)
//       REPORT_COUNT(1),    0x01,       // Report Count (1)
//       REPORT_SIZE(1),     0x04,       // Report Size (4)
//       INPUT(1),           0x01,       // Input (Constant) for padding
      
//     END_COLLECTION(0),              // End Collection (Physical)
//   END_COLLECTION(0),              // End Collection (Application)
// };

// } // namespace "" 


// HIDEndoscopyService::HIDEndoscopyService(BLE &_ble) 
//   : HIDService(_ble,
//                HID_OTHER,
               
//                // report map
//                hid_report_map, 
//                sizeof(hid_report_map) / sizeof(*hid_report_map),

//                // input report
//                (uint8_t*)&hid_input_report,
//                sizeof(hid_input_report),
//                input_report_ref_descs,
//                sizeof(input_report_ref_descs) / sizeof(*input_report_ref_descs))
// {

// }

// void HIDEndoscopyService::motion(int8_t fx, int8_t fy, int8_t fz) {
//   hid_input_report.axisX = (float)fx;
//   hid_input_report.axisY = (float)fy;
//   hid_input_report.axisZ = (float)fz;
//   // hid_input_report.axisRX = fx;
//   // hid_input_report.axisRY = fy;
//   // hid_input_report.axisRZ = fz;
// }

// void HIDEndoscopyService::motionAcel(float fx, float fy, float fz, uint8_t enable, uint32_t dt, uint8_t timestamp) {
//   hid_input_report.axisX = fx;
//   hid_input_report.axisY = fy;
//   hid_input_report.axisZ = fz;
//   hid_input_report.enable = enable & 0b00000001;
//   hid_input_report.dt = dt;
//   hid_input_report.id = 1;
//   hid_input_report.timestamp = timestamp;
// }

// void HIDEndoscopyService::motionGyro(float fx, float fy, float fz, uint8_t enable, uint32_t dt, uint8_t timestamp) {
//   hid_input_report.axisX = fx;
//   hid_input_report.axisY = fy;
//   hid_input_report.axisZ = fz;
//   hid_input_report.enable = enable & 0b00000010;
//   hid_input_report.dt = dt;
//   hid_input_report.id = 2;
//   hid_input_report.timestamp = timestamp;
// }

// void HIDEndoscopyService::motionMag(float fx, float fy, float fz, uint8_t enable, uint32_t dt, uint8_t timestamp) {
//   hid_input_report.axisX = fx;
//   hid_input_report.axisY = fy;
//   hid_input_report.axisZ = fz;
//   hid_input_report.enable = enable & 0b00000100;
//   hid_input_report.dt = dt;
//   hid_input_report.id = 3;
//   hid_input_report.timestamp = timestamp;
// }


// void HIDEndoscopyService::buttons(uint8_t buttons) {
//   hid_input_report.buttons = uint8_t(buttons); 
// }

